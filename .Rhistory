group_by(id) %>%
plot_time_series(
.date_var    = date,
.value       = sales,
.facet_ncol  = 2,
.smooth      = F,
.interactive = F
)
splits <- time_series_split(data_tbl, assess = "3 month", cumulative = TRUE)
recipe_spec <- recipe(sales ~ ., data = training(splits)) %>%
step_timeseries_signature(date)
train_tbl <- training(splits) %>% bake(prep(recipe_spec), .)
test_tbl  <- testing(splits) %>% bake(prep(recipe_spec), .)
# Initialize H2O
h2o.init()
model_spec <- automl_reg(mode = 'regression') %>%
set_engine(
engine                     = 'h2o',
max_runtime_secs           = 5,
max_runtime_secs_per_model = 3,
max_models                 = 3,
nfolds                     = 5,
exclude_algos              = c("DeepLearning"),
verbosity                  = NULL,
seed                       = 786
)
model_spec
model_fitted <- model_spec %>%
fit(sales ~ ., data = train_tbl)
model_fitted
predict(model_fitted, test_tbl)
library(tidymodels)
library(modeltime.h2o)
library(tidyverse)
library(timetk)
library(vroom)
train_data <- vroom('train.csv')
test_data <- vroom('test.csv')
train_data$id <- paste(train_data$store, train_data$item, sep = "_")
test_data$id <- paste(test_data$store, test_data$item, sep = "_")
train <- train_data %>% filter(store==1, item==1)
test <- test_data %>% filter(store==1, item==1)
data_tbl <- train_data %>%
select(id, date, sales)
data_tbl %>%
group_by(id) %>%
plot_time_series(
.date_var    = date,
.value       = sales,
.facet_ncol  = 2,
.smooth      = F,
.interactive = F
)
splits <- time_series_split(data_tbl, assess = "3 month", cumulative = TRUE)
recipe_spec <- recipe(sales ~ ., data = training(splits)) %>%
step_timeseries_signature(date)
train_tbl <- training(splits) %>% bake(prep(recipe_spec), .)
test_tbl  <- testing(splits) %>% bake(prep(recipe_spec), .)
# Initialize H2O
h2o.init()
model_spec <- automl_reg(mode = 'regression') %>%
set_engine(
engine                     = 'h2o',
max_runtime_secs           = 5,
max_runtime_secs_per_model = 3,
max_models                 = 3,
nfolds                     = 5,
exclude_algos              = c("DeepLearning"),
verbosity                  = NULL,
seed                       = 786
)
model_spec
model_fitted <- model_spec %>%
fit(sales ~ ., data = train_tbl)
model_fitted
predict(model_fitted, test_tbl)
i
model_fitted <- model_spec %>%
fit(sales ~ ., data = train_tbl)
model_fitted
train <- train_data %>% filter(store==1, item==1)
test <- test_data %>% filter(store==1, item==1)
data_tbl <- train %>%
select(date, item, sales)
data_tbl %>%
group_by(item) %>%
plot_time_series(
.date_var    = date,
.value       = sales,
.facet_ncol  = 2,
.smooth      = F,
.interactive = F
)
splits <- time_series_split(data_tbl, assess = "3 month", cumulative = TRUE)
recipe_spec <- recipe(sales ~ ., data = training(splits)) %>%
step_timeseries_signature(date)
train_tbl <- training(splits) %>% bake(prep(recipe_spec), .)
test_tbl  <- testing(splits) %>% bake(prep(recipe_spec), .)
# Initialize H2O
h2o.init()
model_spec <- automl_reg(mode = 'regression') %>%
set_engine(
engine                     = 'h2o',
max_runtime_secs           = 5,
max_runtime_secs_per_model = 3,
max_models                 = 3,
nfolds                     = 5,
exclude_algos              = c("DeepLearning"),
verbosity                  = NULL,
seed                       = 786
)
model_spec
model_fitted <- model_spec %>%
fit(sales ~ ., data = train_tbl)
model_fitted
predict(model_fitted, test_tbl)
test_tbl
test_tbl.sales
test_tbl$sales
?smape())
?smape()
peds <- predict(model_fitted, test_tbl)
smape_vec(test_tbl$sales, preds)
smape_vec(test_tbl$sales, peds)
smape_vec(test_tbl$sales, peds$.pred)
train <- train_data %>% filter(store==1, item==2)
test <- test_data %>% filter(store==1, item==1)
data_tbl <- train %>%
select(date, item, sales)
data_tbl %>%
group_by(item) %>%
plot_time_series(
.date_var    = date,
.value       = sales,
.facet_ncol  = 2,
.smooth      = F,
.interactive = F
)
splits <- time_series_split(data_tbl, assess = "3 month", cumulative = TRUE)
recipe_spec <- recipe(sales ~ ., data = training(splits)) %>%
step_timeseries_signature(date)
train_tbl <- training(splits) %>% bake(prep(recipe_spec), .)
test_tbl  <- testing(splits) %>% bake(prep(recipe_spec), .)
# Initialize H2O
h2o.init()
model_spec <- automl_reg(mode = 'regression') %>%
set_engine(
engine                     = 'h2o',
max_runtime_secs           = 5,
max_runtime_secs_per_model = 3,
max_models                 = 3,
nfolds                     = 5,
exclude_algos              = c("DeepLearning"),
verbosity                  = NULL,
seed                       = 786
)
model_spec
model_fitted <- model_spec %>%
fit(sales ~ ., data = train_tbl)
model_fitted
peds <- predict(model_fitted, test_tbl)
smape_vec(test_tbl$sales, peds$.pred)
library(tidyverse)
library(tidymodels)
library(modeltime)
library(timetk)
library(vroom)
train_data<- vroom('train.csv')
test_data <- vroom('test.csv')
nStores <- max(train_data$store)
nItems <- max(train_data$item)
for(s in 1:nStores){
for(i in 1:nItems){
storeItemTrain <- train_data %>%
filter(store==s, item==i)
storeItemTest <- test_data %>%
filter(store==s, item==i)
cv_split <- time_series_split(storeItemTrain, assess="3 months", cumulative = TRUE)
prophet_model <- prophet_reg() %>%
set_engine(engine = 'prophet') %>%
fit(sales ~ date, data = training(cv_split))
preds <- modeltime_calibrate(prophet_model, new_data = testing(cv_split)) %>%
modeltime_forecast(new_data = storeItemTest)
## Save storeItem predictions
if(s==1 & i==1){
all_preds <- preds
} else {
all_preds <- bind_rows(all_preds, preds)
}
}
}
library(tidyverse)
library(tidymodels)
library(modeltime)
library(timetk)
library(vroom)
train_data<- vroom('train.csv')
test_data <- vroom('test.csv')
nStores <- max(train_data$store)
nItems <- max(train_data$item)
nStores
nItems
for(s in 1:nStores){
for(i in 1:nItems){
storeItemTrain <- train_data %>%
filter(store==s, item==i)
storeItemTest <- test_data %>%
filter(store==s, item==i)
cv_split <- time_series_split(storeItemTrain, assess="3 months", cumulative = TRUE)
prophet_model <- prophet_reg() %>%
set_engine(engine = 'prophet') %>%
fit(sales ~ date, data = training(cv_split))
preds <- prophet_model %>%
modeltime_forecast(new_data = storeItemTest, actual_data = storeItemTrain) %>%
filter(!is.na(.model_id)) %>%
mutate(id=storeItemTest$id) %>%
select(id, .value) %>%
rename(sales=.value)
## Save storeItem predictions
if(s==1 & i==1){
all_preds <- preds
} else {
all_preds <- bind_rows(all_preds, preds)
}
}
}
#for(s in 1:nStores){
# for(i in 1:nItems){
storeItemTrain <- train_data %>%
filter(store==1, item==1)
storeItemTest <- test_data %>%
filter(store==1, item==1)
storeItemTrain
storeItemTest
cv_split <- time_series_split(storeItemTrain, assess="3 months", cumulative = TRUE)
prophet_model <- prophet_reg() %>%
set_engine(engine = 'prophet') %>%
fit(sales ~ date, data = training(cv_split))
preds <- prophet_model %>%
modeltime_forecast(new_data = storeItemTest, actual_data = storeItemTrain) %>%
filter(!is.na(.model_id)) %>%
mutate(id=storeItemTest$id) %>%
select(id, .value) %>%
rename(sales=.value)
prophet_model <- prophet_reg() %>%
set_engine(engine = 'prophet') %>%
fit(sales ~ date, data = training(cv_split))
prophet_model_tbl <- modeltime_table(prophet_model)
preds <- prophet_model_tbl %>%
modeltime_forecast(new_data = storeItemTest, actual_data = storeItemTrain) %>%
filter(!is.na(.model_id)) %>%
mutate(id=storeItemTest$id) %>%
select(id, .value) %>%
rename(sales=.value)
for(s in 1:nStores){
for(i in 1:nItems){
storeItemTrain <- train_data %>%
filter(store==1, item==1)
storeItemTest <- test_data %>%
filter(store==1, item==1)
cv_split <- time_series_split(storeItemTrain, assess="3 months", cumulative = TRUE)
prophet_model <- prophet_reg() %>%
set_engine(engine = 'prophet') %>%
fit(sales ~ date, data = training(cv_split))
prophet_model_tbl <- modeltime_table(prophet_model)
preds <- prophet_model_tbl %>%
modeltime_forecast(new_data = storeItemTest, actual_data = storeItemTrain) %>%
filter(!is.na(.model_id)) %>%
mutate(id=storeItemTest$id) %>%
select(id, .value) %>%
rename(sales=.value)
## Save storeItem predictions
if(s==1 & i==1){
all_preds <- preds
} else {
all_preds <- bind_rows(all_preds, preds)
}
}
}
set.seed(12345)
library(tidymodels)
library(modeltime.h2o)
library(tidyverse)
library(timetk)
library(vroom)
train_data <- vroom('train.csv')
test_data <- vroom('test.csv')
train_data$id <- paste(train_data$store, train_data$item, sep = "_")
test_data$id <- paste(test_data$store, test_data$item, sep = "_")
train <- train_data %>% filter(store==1, item==2)
test <- test_data %>% filter(store==1, item==1)
data_tbl <- train %>%
select(date, item, sales)
train_data
train
data_tbl
library(tidymodels)
library(modeltime.h2o)
library(tidyverse)
library(timetk)
library(vroom)
train_data <- vroom('train.csv')
test_data <- vroom('test.csv')
train_data$id <- paste(train_data$store, train_data$item, sep = "_")
test_data$id <- paste(test_data$store, test_data$item, sep = "_")
train <- train_data %>% filter(store==1, item==2)
test <- test_data %>% filter(store==1, item==1)
data_tbl <- train %>%
select(date, item, sales)
data_tbl %>%
group_by(item) %>%
plot_time_series(
.date_var    = date,
.value       = sales,
.facet_ncol  = 2,
.smooth      = F,
.interactive = F
)
splits <- time_series_split(data_tbl, assess = "3 month", cumulative = TRUE)
recipe_spec <- recipe(sales ~ ., data = training(splits)) %>%
step_timeseries_signature(date)
train_tbl <- training(splits) %>% bake(prep(recipe_spec), .)
test_tbl  <- testing(splits) %>% bake(prep(recipe_spec), .)
# Initialize H2O
h2o.init()
model_spec <- automl_reg(mode = 'regression') %>%
set_engine(
engine                     = 'h2o',
max_runtime_secs           = 5,
max_runtime_secs_per_model = 3,
max_models                 = 3,
nfolds                     = 5,
exclude_algos              = c("DeepLearning"),
verbosity                  = NULL,
seed                       = 786
)
library(tidyverse)
library(tidymodels)
library(modeltime)
library(timetk)
library(vroom)
train_data<- vroom('train.csv')
test_data <- vroom('test.csv')
nStores <- max(train_data$store)
nItems <- max(train_data$item)
for(s in 1:nStores){
for(i in 1:nItems){
storeItemTrain <- train_data %>%
filter(store==s, item==i)
storeItemTest <- test_data %>%
filter(store==s, item==i)
recipe <- recipe(sales ~ ., data=storeItemTrain) %>%
step_date(date, features="decimal") %>%
step_date(date, features="dow") %>%
step_mutate(date_dow = as.factor(date_dow)) %>%
step_rm(store, item) %>%
step_date(date, features="doy") %>%
step_range(date_doy, min=0, max=pi) %>%
step_mutate(sinDOY=sin(date_doy), cosDOY=cos(date_doy))
rand_for <- rand_forest(mtry = tune(),
min_n = tune(),
trees = 250) %>%
set_engine("ranger") %>%
set_mode("regression")
wf <- workflow() %>%
add_recipe(recipe) %>%
add_model(rand_for)
grid_of_tuning_params_randfor <- grid_regular(mtry(range = c(1,100)),
min_n(),
levels = 2)
folds <- vfold_cv(storeItemTrain, v = 5, repeats = 1)
## Run the CV
CV_results <- wf %>%
tune_grid(
resamples = folds,
grid = grid_of_tuning_params_randfor,
metrics = metric_set(smape)
)
bestTune <- CV_results %>%
show_best(metric = 'smape')
final_wf <- rf_wf %>%
finalize_workflow(bestTune) %>%
fit(data=train_data)
preds_intial <- predict(final_wf, new_data=storeItemTest, type = 'numeric')
preds <- tibble(
id = storeItemTest$id,        # Add the 'id' column
sales = as.numeric(preds_intial) # Rename and ensure predictions are numeric
)
## Save storeItem predictions
if(s==1 & i==1){
all_preds <- preds
} else {
all_preds <- bind_rows(all_preds, preds)
}
}
}
nStores <- max(train_data$store)
nItems <- max(train_data$item)
#for(s in 1:nStores){
# for(i in 1:nItems){
storeItemTrain <- train_data %>%
filter(store==1, item==1)
storeItemTest <- test_data %>%
filter(store==1, item==1)
recipe <- recipe(sales ~ ., data=storeItemTrain) %>%
step_date(date, features="decimal") %>%
step_date(date, features="dow") %>%
step_mutate(date_dow = as.factor(date_dow)) %>%
step_rm(store, item) %>%
step_date(date, features="doy") %>%
step_range(date_doy, min=0, max=pi) %>%
step_mutate(sinDOY=sin(date_doy), cosDOY=cos(date_doy))
rand_for <- rand_forest(mtry = tune(),
min_n = tune(),
trees = 250) %>%
set_engine("ranger") %>%
set_mode("regression")
wf <- workflow() %>%
add_recipe(recipe) %>%
add_model(rand_for)
grid_of_tuning_params_randfor <- grid_regular(mtry(range = c(1,100)),
min_n(),
levels = 2)
folds <- vfold_cv(storeItemTrain, v = 5, repeats = 1)
## Run the CV
CV_results <- wf %>%
tune_grid(
resamples = folds,
grid = grid_of_tuning_params_randfor,
metrics = metric_set(smape)
)
bestTune <- CV_results %>%
show_best(metric = 'smape')
final_wf <- rf_wf %>%
finalize_workflow(bestTune) %>%
fit(data=train_data)
final_wf <- wf %>%
finalize_workflow(bestTune) %>%
fit(data=train_data)
preds_intial <- predict(final_wf, new_data=storeItemTest, type = 'numeric')
## Run the CV
CV_results <- wf %>%
tune_grid(
resamples = folds,
grid = grid_of_tuning_params_randfor,
metrics = metric_set(smape)
)
prepped_rec <- prep(recipe)
baked <- bake(prepped_rec, new_data = storeItemTrain)
baked
## Run the CV
CV_results <- wf %>%
tune_grid(
resamples = folds,
grid = grid_of_tuning_params_randfor,
metrics = metric_set(smape)
)
grid_of_tuning_params_randfor <- grid_regular(mtry(range = c(1,6)),
min_n(),
levels = 2)
folds <- vfold_cv(storeItemTrain, v = 5, repeats = 1)
## Run the CV
CV_results <- wf %>%
tune_grid(
resamples = folds,
grid = grid_of_tuning_params_randfor,
metrics = metric_set(smape)
)
bestTune <- CV_results %>%
show_best(metric = 'smape')
final_wf <- wf %>%
finalize_workflow(bestTune) %>%
fit(data=train_data)
final_wf <- wf %>%
finalize_workflow(bestTune) %>%
fit(data=storeItemTrain)
bestTune
bestTune <- CV_results %>%
show_best(metric = 'smape', n=1)
final_wf <- wf %>%
finalize_workflow(bestTune) %>%
fit(data=storeItemTrain)
preds_intial <- predict(final_wf, new_data=storeItemTest, type = 'numeric')
preds <- tibble(
id = storeItemTest$id,        # Add the 'id' column
sales = as.numeric(preds_intial) # Rename and ensure predictions are numeric
)
preds_intial
storeItemTest
preds <- tibble(
id = storeItemTest$id,        # Add the 'id' column
sales = as.numeric(preds_intial) # Rename and ensure predictions are numeric
)
str(preds_intial)
str(storeItemTest)
length(storeItemTest)
nrow(storeItemTest)
nrow(preds_intial)
preds_numeric <- preds_initial$.pred
preds <- tibble(
id = storeItemTest$id,        # Add the 'id' column
sales = as.numeric(preds_numeric) # Rename and ensure predictions are numeric
)
preds_intial <- predict(final_wf, new_data=storeItemTest, type = 'numeric')
preds_numeric <- preds_initial$.pred
preds_initial <- predict(final_wf, new_data=storeItemTest, type = 'numeric')
preds_numeric <- preds_initial$.pred
preds <- tibble(
id = storeItemTest$id,        # Add the 'id' column
sales = as.numeric(preds_numeric) # Rename and ensure predictions are numeric
)
preds
